// Place your key bindings in this file to overwrite the defaults
[
    // unmap default bindings
    {
        "key": "ctrl+tab",
        "command": "-workbench.action.openNextRecentlyUsedEditorInGroup"
    },
    {
        "key": "ctrl+pagedown",
        "command": "-workbench.action.nextEditor"
    },
    {
        "key": "ctrl+shift+tab",
        "command": "-workbench.action.openPreviousRecentlyUsedEditorInGroup"
    },
    {
        "key": "ctrl+pageup",
        "command": "-workbench.action.previousEditor"
    },
    {
        "key": "ctrl+k ctrl+left",
        "command": "-workbench.action.focusLeftGroup"
    },
    {
        "key": "ctrl+k ctrl+right",
        "command": "-workbench.action.focusRightGroup"
    },
    // navigate between tabs with , and .
    {
        "key": "alt+,",
        "command": "workbench.action.previousEditorInGroup",
        "when": "!terminalFocus"
    },
    {
        "key": "alt+.",
        "command": "workbench.action.nextEditorInGroup",
        "when": "!terminalFocus"
    },
    // jump between editor groups with vim style keybindings
    {
        "key": "alt+h",
        "command": "workbench.action.focusLeftGroup",
        "when": "!terminalFocus"
    },
    {
        "key": "alt+l",
        "command": "workbench.action.focusRightGroup",
        "when": "!terminalFocus"
    },
    {
        "key": "alt+j",
        "command": "workbench.action.focusBelowGroup",
        "when": "!terminalFocus"
    },
    {
        "key": "alt+k",
        "command": "workbench.action.focusAboveGroup",
        "when": "!terminalFocus"
    },
    // emacs style bindings
    {
        "key": "alt+b",
        "command": "cursorWordLeft"
    },
    {
        "key": "alt+f",
        "command": "cursorWordRight"
    },
    {
        "key": "alt+x",
        "command": "workbench.action.showCommands"
    },
    {
        "key": "ctrl+x b",
        "command": "workbench.action.quickOpen"
    },
    {
        "key": "ctrl+x ctrl+s",
        "command": "workbench.action.files.save"
    },
    {
        "key": "ctrl+x k",
        "command": "workbench.action.closeActiveEditor"
    },
    // my idiosyncratic alt bindings
    {
        "key": "alt+`",
        "command": "workbench.action.closeActiveEditor"
    },
    {
        "key": "alt+w",
        "command": "workbench.action.files.save"
    },
    {
        "key": "alt+u",
        "command": "workbench.action.reopenClosedEditor"
    },
    {
        "key": "alt+m",
        "command": "workbench.action.editor.changeLanguageMode"
    },
    {
        "key": "alt+p",
        "command": "workbench.action.showCommands"
    },
    {
        "key": "alt+o",
        "command": "workbench.action.quickOpen"
    },
    {
        "key": "alt+f",
        "command": "actions.find"
    },
    {
        "key": "alt+r",
        "command": "editor.action.startFindReplaceAction"
    },
    {
        "key": "alt+e",
        "command": "workbench.action.focusSideBar",
        "when": "inputFocus"
    },
    {
        "key": "alt+enter",
        "command": "editor.emmet.action.expandAbbreviation",
        "when": "editorTextFocus && !editorReadonly && !editorTabMovesFocus"
    },
    {
        "key": "alt+e",
        "command": "workbench.action.focusActiveEditorGroup",
        "when": "!inputFocus"
    },
    {
        "key": "alt+shift+e",
        "command": "workbench.files.action.showActiveFileInExplorer"
    },
    {
        "key": "ctrl+shift+t",
        "command": "-workbench.action.reopenClosedEditor"
    },
    {
        "key": "alt+shift+t",
        "command": "workbench.action.terminal.toggleTerminal"
    },
    {
        "key": "alt+t",
        "command": "workbench.action.terminal.focus",
        "when": "!terminalFocus"
    },
    {
        "key": "alt+t",
        "command": "workbench.action.focusActiveEditorGroup",
        "when": "terminalFocus"
    },
    {
        "key": "ctrl+`",
        "command": "-workbench.action.terminal.toggleTerminal"
    },
    {
        "key": "alt+n",
        "command": "newFile.createNewFile"
    },
    {
        "key": "alt+i alt+p",
        "command": "editor.action.triggerParameterHints",
        "when": "editorHasSignatureHelpProvider && editorTextFocus"
    },

    // font and editor zoom
    // ctrl+=/ctrl+- for font zoom
    {
        "key": "ctrl+-",
        "command": "-workbench.action.zoomOut"
    },
    {
        "key": "ctrl+=",
        "command": "editor.action.fontZoomIn"
    },
    {
        "key": "ctrl+numpad_subtract",
        "command": "editor.action.fontZoomOut"
    },
    {
        "key": "ctrl+-",
        "command": "editor.action.fontZoomOut"
    },
    // ctrl+shift+=/ctrl+shift+- for editor size
    {
        "key": "ctrl+shift+-",
        "command": "workbench.action.zoomOut"
    },
    {
        "key": "ctrl+shift+=",
        "command": "workbench.action.zoomIn"
    },
    {
        "key": "ctrl+numpad0",
        "command": "editor.action.fontZoomReset"
    },

    // terminal navigation/control
    {
        "key": "alt+r",
        "command": "workbench.action.terminal.rename",
        "when": "terminalFocus"
    },
    {
        "key": "ctrl+e",
        "command": "-workbench.action.quickOpen"
    },

    // navigate left and right when terminal is at bottom
    {
        "key": "alt+l",
        "command": "workbench.action.terminal.focusNextPane",
        "when": "terminalFocus && panelPosition == 'bottom'"
    },
    {
        "key": "alt+right",
        "command": "workbench.action.terminal.focusNextPane",
        "when": "terminalFocus && panelPosition == 'bottom'"
    },
    {
        "key": "alt+h",
        "command": "workbench.action.terminal.focusPreviousPane",
        "when": "terminalFocus && panelPosition == 'bottom'"
    },
    {
        "key": "alt+left",
        "command": "workbench.action.terminal.focusPreviousPane",
        "when": "terminalFocus && panelPosition == 'bottom'"
    },

    // navigate up and down when terminal is at the side
    {
        "key": "alt+j",
        "command": "workbench.action.terminal.focusNextPane",
        "when": "terminalFocus && panelPosition != 'bottom'"
    },
    {
        "key": "alt+down",
        "command": "workbench.action.terminal.focusNextPane",
        "when": "terminalFocus && panelPosition != 'bottom'"
    },
    {
        "key": "alt+k",
        "command": "workbench.action.terminal.focusPreviousPane",
        "when": "terminalFocus && panelPosition != 'bottom'"
    },
    {
        "key": "alt+up",
        "command": "workbench.action.terminal.focusPreviousPane",
        "when": "terminalFocus && panelPosition != 'bottom'"
    },

    {
        "key": "ctrl+shift+t",
        "command": "workbench.action.terminal.new"
    },
    {
        "key": "ctrl+shift+`",
        "command": "-workbench.action.terminal.new"
    },
    {
        "key": "alt+s",
        "command": "workbench.action.terminal.split",
        "when": "terminalFocus"
    },
    {
        "key": "ctrl+\\",
        "command": "workbench.action.terminal.split",
        "when": "terminalFocus"
    },
    {
        "key": "ctrl+shift+5",
        "command": "-workbench.action.terminal.split",
        "when": "terminalFocus"
    },
    {
        "key": "shift+alt+h",
        "command": "workbench.action.terminal.resizePaneLeft",
        "when": "terminalFocus"
    },
    {
        "key": "ctrl+shift+left",
        "command": "-workbench.action.terminal.resizePaneLeft",
        "when": "terminalFocus"
    },
    {
        "key": "shift+alt+l",
        "command": "workbench.action.terminal.resizePaneRight",
        "when": "terminalFocus"
    },
    {
        "key": "ctrl+shift+right",
        "command": "-workbench.action.terminal.resizePaneRight",
        "when": "terminalFocus"
    },
    {
        "key": "alt+a",
        "command": "workbench.action.keepEditor"
    },
    {
        "key": "ctrl+k enter",
        "command": "workbench.action.keepEditor"
    },
    {
        "key": "shift+alt+d",
        "command": "editor.action.revealDefinition",
        "when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor"
    },
    {
        "key": "f12",
        "command": "editor.action.revealDefinition",
        "when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor"
    },
    {
        "key": "alt+d",
        "command": "editor.action.revealDeclaration",
        "when": "!(resourceDirname =~ /foam/"
    },
    {
        "key": "shift+alt+l",
        "command": "workbench.action.moveEditorToRightGroup"
    },
    {
        "key": "shift+alt+h",
        "command": "workbench.action.moveEditorToLeftGroup"
    },
    {
        "key": "shift+alt+k",
        "command": "workbench.action.moveEditorToAboveGroup"
    },
    {
        "key": "shift+alt+j",
        "command": "workbench.action.moveEditorToBelowGroup"
    },
    {
        "key": "alt+-",
        "command": "workbench.action.toggleEditorWidths"
    },
    {
        "key": "ctrl+b",
        "command": "-extension.vim_ctrl+b",
        "when": "editorTextFocus && vim.active && vim.use<C-b> && !inDebugRepl && vim.mode != 'Insert'"
    },
    {
        "key": "ctrl+j",
        "command": "-extension.vim_ctrl+j",
        "when": "editorTextFocus && vim.active && vim.use<C-j> && !inDebugRepl"
    },
    {
        "key": "ctrl+alt+l",
        "command": "workbench.action.positionPanelRight"
    },
    {
        "key": "ctrl+alt+h",
        "command": "workbench.action.positionPanelLeft"
    },
    {
        "key": "ctrl+alt+j",
        "command": "workbench.action.positionPanelBottom"
    },
    {
        "key": "ctrl+r",
        "command": "-extension.vim_ctrl+r",
        "when": "editorTextFocus && vim.active && vim.use<C-r> && !inDebugRepl"
    },
    {
        "key": "alt+,",
        "command": "workbench.action.terminal.focusPrevious",
        "when": "terminalFocus"
    },
    {
        "key": "alt+.",
        "command": "workbench.action.terminal.focusNext",
        "when": "terminalFocus"
    },
    {
        "key": "ctrl+shift+v",
        "command": "editor.action.clipboardPasteAction"
    },
    {
        "key": "ctrl+v",
        "command": "-editor.action.clipboardPasteAction"
    },
    {
        "key": "alt+i alt+i",
        "command": "editor.action.showHover",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+k ctrl+i",
        "command": "-editor.action.showHover",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+i alt+d",
        "command": "editor.action.showDefinitionPreviewHover"
    },
    {
        "key": "shift+escape",
        "command": "notifications.clearAll"
    },
    {
        "key": "ctrl+[",
        "command": "workbench.action.toggleSidebarVisibility"
    },
    {
        "key": "ctrl+]",
        "command": "workbench.action.toggleAuxiliaryBar"
    },
    {
        "key": "ctrl+[",
        "command": "-editor.action.outdentLines",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+[",
        "command": "-markdown.extension.onOutdentLines",
        "when": "editorTextFocus && !suggestWidgetVisible && editorLangId == 'markdown'"
    },
    {
        "key": "ctrl+tab",
        "command": "-workbench.action.quickOpenPreviousRecentlyUsedEditorInGroup"
    },
    {
        "key": "ctrl+shift+tab",
        "command": "-workbench.action.quickOpenLeastRecentlyUsedEditorInGroup"
    },
    {
        "key": "ctrl+shift+tab",
        "command": "workbench.action.terminal.focusPrevious",
        "when": "terminalFocus"
    },
    {
        "key": "ctrl+shift+tab",
        "command": "workbench.action.previousEditorInGroup",
        "when": "!terminalFocus"
    },
    {
        "key": "ctrl+tab",
        "command": "workbench.action.terminal.focusNext",
        "when": "terminalFocus"
    },
    {
        "key": "ctrl+tab",
        "command": "workbench.action.nextEditorInGroup",
        "when": "!terminalFocus"
    },
    {
        "key": "f3",
        "command": "-editor.action.nextMatchFindAction",
        "when": "editorFocus"
    },
    {
        "key": "ctrl+shift+[",
        "command": "-markdown.extension.editing.toggleHeadingDown",
        "when": "editorTextFocus && !editorReadonly && editorLangId == 'markdown'"
    },
    {
        "key": "ctrl+shift+]",
        "command": "-markdown.extension.editing.toggleHeadingUp",
        "when": "editorTextFocus && !editorReadonly && editorLangId == 'markdown'"
    },
    {
        "key": "ctrl+`",
        "command": "markdown.extension.editing.toggleCodeSpan",
        "when": "editorTextFocus && !editorReadonly && editorLangId == 'markdown'"
    },
    {
        "key": "ctrl+shift+`",
        "command": "markdown.extension.editing.toggleCodeBlock",
        "when": "editorTextFocus && !editorReadonly && editorLangId == 'markdown'"
    },
    {
        "key": "alt+d",
        "command": "foam-vscode.open-daily-note",
        "when": "resourceDirname =~ /foam/"
    },
    {
        "key": "alt+d",
        "command": "-foam-vscode.open-daily-note"
    },
    {
        "key": "shift+enter",
        "command": "-python.execSelectionInTerminal",
        "when": "editorTextFocus && !findInputFocussed && !jupyter.ownsSelection && !notebookEditorFocused && !replaceInputFocussed && editorLangId == 'python'"
    },
    {
        "key": "shift+enter",
        "command": "testing.runAtCursor",
        "when": "editorTextFocus && !notebookCellListFocused"
    },
    {
        "key": "ctrl+shift+enter",
        "command": "testing.runAll",
        "when": "!notebookCellListFocused"
    },
    {
        "key": "alt+enter",
        "command": "editor.action.quickFix",
        "when": "editorHasCodeActionsProvider && editorTextFocus && !editorReadonly"
    },
    {
        "key": "tab",
        "command": "insertNextSuggestion",
        "when": "editorFocus && hasOtherSuggestions && textInputFocus && !inSnippetMode && !suggestWidgetVisible && config.editor.tabCompletion == 'on'"
    },
    {
        "key": "tab",
        "command": "-insertNextSuggestion",
        "when": "hasOtherSuggestions && textInputFocus && !inSnippetMode && !suggestWidgetVisible && config.editor.tabCompletion == 'on'"
    },
    {
        "key": "tab",
        "command": "insertBestCompletion",
        "when": "editorFocus && atEndOfWord && textInputFocus && !hasOtherSuggestions && !inSnippetMode && !suggestWidgetVisible && config.editor.tabCompletion == 'on'"
    },
    {
        "key": "tab",
        "command": "-insertBestCompletion",
        "when": "atEndOfWord && textInputFocus && !hasOtherSuggestions && !inSnippetMode && !suggestWidgetVisible && config.editor.tabCompletion == 'on'"
    },
    {
        "key": "tab",
        "command": "editor.action.inlineSuggest.commit",
        "when": "editorTextFocus && inlineSuggestionHasIndentationLessThanTabSize && inlineSuggestionVisible && !editorTabMovesFocus"
    },
    {
        "key": "tab",
        "command": "-editor.action.inlineSuggest.commit",
        "when": "inlineSuggestionHasIndentationLessThanTabSize && inlineSuggestionVisible && !editorTabMovesFocus"
    },
    {
        "key": "f3",
        "command": "bookmarks.toggleLabeled",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+alt+f",
        "command": "search.action.openNewEditor"
    },
    // allow closing the active window with ctrl-w if it's not an editor
    {
        "key": "ctrl+w",
        "command": "workbench.action.closeActiveEditor",
        "when": "!editorTextFocus"
    },
    {
        "key": "ctrl+w",
        "command": "-workbench.action.closeGroup",
        "when": "activeEditorGroupEmpty && multipleEditorGroups"
    },
    {
        "key": "ctrl+w",
        "command": "extension.vim_ctrl+w",
        "when": "editorTextFocus && vim.active && !inDebugRepl"
    },
    {
        "key": "alt+i",
        "command": "workbench.action.showAllEditors"
    },
    {
        "key": "alt+right",
        "command": "editor.action.indentLines",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "alt+left",
        "command": "editor.action.outdentLines",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "f5",
        "command": "python.execInTerminal",
        "when": "editorTextFocus && editorLangId == 'python'"
    },
]